package dao;

import java.sql.*;
import java.util.ArrayList;

import javax.naming.NamingException;
import util.*;

public class FeedDAO {

    public boolean insert(String uid, String ucon, String uimages) throws NamingException, SQLException {
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            String sql = "INSERT INTO feed(id, content, images) VALUES(?, ?, ?)";
            
            conn = ConnectionPool.get();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, uid);
            stmt.setString(2, ucon);
            stmt.setString(3, uimages);
            
            int count = stmt.executeUpdate();
            return (count == 1) ? true : false;
            
        } finally {
            if (stmt != null) stmt.close(); 
            if (conn != null) conn.close();
        }
    }

    public ArrayList<FeedObj> getList() throws NamingException, SQLException {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            String sql = "SELECT id, content, ts, images FROM feed ORDER BY ts DESC";
            
            conn = ConnectionPool.get();
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            
            ArrayList<FeedObj> feeds = new ArrayList<FeedObj>();
            while(rs.next()) {
                feeds.add(new FeedObj(rs.getString("id"), rs.getString("content"), rs.getString("ts"), rs.getString("images")));
            }
            return feeds;
            
        } finally {
            if (rs != null) rs.close(); 
            if (stmt != null) stmt.close(); 
            if (conn != null) conn.close();
        }
    }
    public class BbsDAO {
    	private Connection conn;
    	private ResultSet rs;
    	
    	public BbsDAO() {
    		try {
    			String dbURL="jdbc:mysql://localhost:3306/BBS?serverTimezone=Asia/Seoul&useSSL=false";	
    			String dbID="root";
    			String dbPassword="root";
    			Class.forName("com.mysql.jdbc.Driver"); //드라이버 로드
    			conn =DriverManager.getConnection(dbURL,dbID,dbPassword); // 연결 얻기 

    		} catch (Exception e) {
    			e.printStackTrace();
    		}
    	}

    	public String getDate() {
    		String SQL="select now()";
    		try {
    		
    			PreparedStatement pstmt=conn.prepareStatement(SQL);
    			rs=pstmt.executeQuery();
    			if(rs.next()) {
    				return rs.getString(1);  // 현재 날짜 반환
    			}
    		} catch (Exception e) {
    			e.printStackTrace();
    		}
    		return "";
    	}
    	
    	public int getNext() {
    		String SQL="select bbsID FROM BBS ORDER BY bbsID DESC";
    		try {
    		
    			PreparedStatement pstmt=conn.prepareStatement(SQL);
    			rs=pstmt.executeQuery();
    			if(rs.next()) {
    				System.out.println(rs.getInt(1)); // select문에서 첫번째 값
    				return rs.getInt(1)+1;  // 현재 인덱스(현재 게시글 개수) +1 반환
    			}
    			return 1;
    		} catch (Exception e) {
    			e.printStackTrace();
    		}
    		return -1;
    	}
    	
    	public int write(String bbsTitle,String userID, String bbsContent) {
    		String SQL="INSERT INTO BBS VALUES(?,?,?,?,?,?)";
    		try {
    			
    			// 1) 쿼리문장분석 2) 컴파일 3) 실행
    			// vs Statement
    			// 캐시 여부 => PreparedStatement 1)~3) 최초한번 실행 하고 캐시에 저장
    			// Statement 매번 1)~3) 실행
    			
    			PreparedStatement pstmt=conn.prepareStatement(SQL);
    			pstmt.setInt(1,getNext());
    			pstmt.setString(2,bbsTitle);
    			pstmt.setString(3,userID);
    			pstmt.setString(4,getDate());
    			pstmt.setString(5,bbsContent);
    			pstmt.setInt(6,1);
    			return pstmt.executeUpdate();
    		} catch (Exception e) {
    			e.printStackTrace();
    		}
    		return -1;
    	}
    	
    	public ArrayList<FeedDAO> getList(int pageNumber){
    		String SQL="SELECT * FROM BBS WHERE bbsID<? AND bbsAvailable=1 ORDER BY bbsID DESC LIMIT 10";
    		ArrayList<FeedDAO> list =new ArrayList<FeedDAO>();
    		try {
    			PreparedStatement pstmt=conn.prepareStatement(SQL);
    			pstmt.setInt(1,getNext()-(pageNumber-1)*10);
    			rs=pstmt.executeQuery();
    			while(rs.next()) {
    				FeedDAO bbs=new FeedDAO();
    				bbs.setBbsID(rs.getInt(1));
    				bbs.setBbsTitle(rs.getString(2));
    				bbs.setUserID(rs.getString(3));
    				bbs.setBbsDate(rs.getString(4));
    				bbs.setBbsContent(rs.getString(5));
    				bbs.setBbsAvailable(rs.getInt(6));
    				list.add(bbs);
    			}
    		} catch (Exception e) {
    			e.printStackTrace();
    		}
    		return list;
    	}
    	
    	
    	public boolean nextPage(int pageNumber) {
    		String SQL="SELECT * FROM BBS WHERE bbsID<? AND bbsAvailable=1 ORDER BY bbsID DESC LIMIT 10";
    		try {
    			PreparedStatement pstmt=conn.prepareStatement(SQL);
    			pstmt.setInt(1,getNext()-(pageNumber-1)*10);
    			rs=pstmt.executeQuery();
    			if(rs.next()) {
    				return true;
    			}
    		} catch (Exception e) {
    			e.printStackTrace();
    		}
    		return false;
    	}
    	
    	public int delete(int BbsID) {
    		String SQL="UPDATE BBS SET bbsAvailable=0 WHERE BbsID=?";
    		try {
    			PreparedStatement pstmt= conn.prepareStatement(SQL);
    			pstmt.setInt(1,BbsID);
    			pstmt.executeUpdate();
    			return 1;
    		} catch (Exception e) {
    			e.printStackTrace();
    		}
    		return -1;
    	}
    	
    	public int update(int bbsID,String bbsTitle,String bbsContent) {
    		String SQL="UPDATE BBS SET bbsTitle=?, bbsContent=? WHERE bbsID=?";
    		try {
    			PreparedStatement pstmt= conn.prepareStatement(SQL);
    			pstmt.setString(1, bbsTitle);
    			pstmt.setString(2, bbsContent);
    			pstmt.setInt(3,bbsID);
    			pstmt.executeUpdate();
    			return 1;
    		} catch (Exception e) {
    			e.printStackTrace();
    		}
    		
    		return -1;
    	}
    	
    	public FeedDAO getBbs(int bbsID) {
    		String SQL="SELECT * FROM BBS WHERE bbsID=?";
    		try {
    			PreparedStatement pstmt=conn.prepareStatement(SQL);
    			pstmt.setInt(1,bbsID);
    			rs=pstmt.executeQuery();
    			if(rs.next()) {
    				feed bbs=new feed();
    				bbs.setBbsID(rs.getInt(1));
    				bbs.setBbsTitle(rs.getString(2));
    				bbs.setUserID(rs.getString(3));
    				bbs.setBbsDate(rs.getString(4));
    				bbs.setBbsContent(rs.getString(5));
    				bbs.setBbsAvailable(rs.getInt(6));
    				return bbs;
    			}
    			
    		} catch (Exception e) {
    			e.printStackTrace();
    		}
    		return null;
    	}
    }
}